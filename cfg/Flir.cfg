#!/usr/bin/env python

## @Flir.cfg
#  @author  Marcel Stuettgen <stuettgen@fh-aachen.de>
#  @author  Fabian Nicolai  <fabian.nicolai@alumni.fh-aachen.de>
#  @version 1.0
#
#  @section LICENSE
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of
#  the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#  General Public License for more details at
#  https://www.gnu.org/copyleft/gpl.html
#
#  @section DESCRIPTION

#  Config file for automatic GUI via "rosrun rqt_reconfigure rqt_reconfigure"
#  for ros based driver / tools for FLIR A325sc infrared camera

PACKAGE = "maskor_gige_camera"

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

irformat_enum = gen.enum([ 
		gen.const("Radiometric", int_t, 0, "Radiometric"),
                gen.const("TemperatureLinear100mK", int_t, 1, "TemperatureLinear100mK"),
                gen.const("TemperatureLinear10mK", int_t, 2, "TemperatureLinear10mK")],
                "Set IRFormat")

pixelformat_enum = gen.enum([
                   gen.const("Mono8", int_t, 0, "Mono8"),
                   gen.const("Mono10", int_t, 1, "Mono10"),
                   gen.const("Mono12", int_t, 2, "Mono12"),
                   gen.const("Mono12Packed", int_t, 3, "Mono12Packed"),
                   gen.const("Mono14", int_t, 4, "Mono14"),
                   gen.const("BayerGB8", int_t, 5, "BayerGB8"),
                   gen.const("BayerRG8", int_t, 6, "BayerRG8"),
                   gen.const("BayerGR8", int_t, 7, "BayerGR8"),
                   gen.const("BayerBG8", int_t, 8, "BayerBG8"),
                   gen.const("BayerBG10", int_t, 9, "BayerBG10"),
                   gen.const("BayerGB12Packed", int_t, 10, "BayerGB12Packed"),
                   gen.const("BayerGR12Packed", int_t, 11, "BayerGR12Packed"),
                   gen.const("BayerGB12", int_t, 12, "BayerGB12"),
                   gen.const("BayerRG12", int_t, 13, "BayerRG12"),
                   gen.const("BayerGR12", int_t, 14, "BayerGR12"),
                   gen.const("RGB8Packed", int_t, 15, "RGB8Packed"),
                   gen.const("BGR8Packed", int_t, 16, "BGR8Packed"),
                   gen.const("RGBA8Packed", int_t, 17, "RGBA8Packed"),
                   gen.const("BGRA8Packed", int_t, 18, "BGRA8Packed"),
                   gen.const("RGB12Packed", int_t, 19, "RGB12Packed"),
                   gen.const("YUV411Packed", int_t, 20, "YUV411Packed"),
                   gen.const("YUV422Packed", int_t, 21, "RGB8PackedYUV422Packed"),
                   gen.const("YUV444Packed", int_t, 22, "YUV444Packed")],
                   "Set Pixelformat")

testimage_enum = gen.enum([ 
	 	 gen.const("Off", int_t, 0, "Off"),
                 gen.const("TestPattern", int_t, 1, "TestPattern")],
                 "TestImageSelector")

acqmode_enum =  gen.enum([ 
                gen.const("Continuous", int_t, 0, "Continuous"),
                gen.const("SingleFrame", int_t, 1, "SingleFrame"),
                gen.const("MulitFrame", int_t, 2, "MultiFrame")],
                "AcquisitionMode")

autofocusmethod_enum = gen.enum([
                       gen.const("Coarse", int_t, 0, "Coarse"),
                       gen.const("Fine", int_t, 1, "Fine")],
                       "AutoFocusMethod")

nucmode_enum = gen.enum([
               gen.const("OffOne", int_t, 0, "OffOne"), 
               gen.const("Auto", int_t, 1, "Auto")],
               "NUCMode")

noisereduction_enum = gen.enum([
                      gen.const("OffTwo", int_t, 0, "OffTwo"), 
                      gen.const("Low", int_t, 1, "Low"),
                      gen.const("Middel", int_t, 2, "Middel"),
                      gen.const("High", int_t, 3, "High")],
                      "NoiseReduction")

focusdirection_enum = gen.enum([
                      gen.const("Stop", int_t, 0, "Stop"), 
                      gen.const("Far", int_t, 1, "Far"),
                      gen.const("Near", int_t, 2, "Near")],
                      "NoiseReduction")

irframerate_enum = gen.enum([
                      gen.const("60Hz", int_t, 0, "60Hz"), 
                      gen.const("30Hz", int_t, 1, "30Hz"),
                      gen.const("15Hz", int_t, 2, "15Hz")],
                      "IRFrameRate")


#       Name       	         Type      Level 	                     Description         Default    Min   Max
gen.add("Start",                 bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Start",              False)
gen.add("Stop",                  bool_t,   SensorLevels.RECONFIGURE_RUNNING, "Stop",               False)
gen.add("AutoFocus",             bool_t,   SensorLevels.RECONFIGURE_RUNNING, "AutoFocus", 	   False)
gen.add("IRFormat",              int_t,	   SensorLevels.RECONFIGURE_RUNNING, "IRFormat Options",     1,       0,    2,   edit_method=irformat_enum)
gen.add("PixelFormat",           int_t,	   SensorLevels.RECONFIGURE_RUNNING, "Pixelformat Options",  0,       0,    22,  edit_method=pixelformat_enum)
gen.add("TestImage",             int_t,	   SensorLevels.RECONFIGURE_RUNNING, "TestImage Selector",   0,       0,    1,   edit_method=testimage_enum)
gen.add("AcquisitionMode",       int_t,    SensorLevels.RECONFIGURE_RUNNING, "AcquisitionMode",      0,       0,    2,   edit_method=acqmode_enum)
gen.add("AcquisitionFrameCount", int_t,    SensorLevels.RECONFIGURE_RUNNING, "AcquisitionFrameCount",15,      0,    30)
gen.add("Width",                 int_t,    SensorLevels.RECONFIGURE_RUNNING, "Width", 	            320,      0,    320)
gen.add("Height",                int_t,    SensorLevels.RECONFIGURE_RUNNING, "Height",              240,      0,    240)
gen.add("OffsetX",               int_t,    SensorLevels.RECONFIGURE_RUNNING, "OffsetX",              0,       0,    320)
gen.add("OffsetY",               int_t,    SensorLevels.RECONFIGURE_RUNNING, "OffsetY",              0,       0,    240)
gen.add("SensorSetDefaults",     bool_t,   SensorLevels.RECONFIGURE_RUNNING, "SensorSetDefaults",   False)
gen.add("SensorSetFactoryDefaults", bool_t,SensorLevels.RECONFIGURE_RUNNING, "SensorSetFactortyDefaults",False)
gen.add("GetSensorInfo",         bool_t,   SensorLevels.RECONFIGURE_RUNNING, "GetSensorInfo",        True)
gen.add("FocusPositon",          int_t,	   SensorLevels.RECONFIGURE_RUNNING, "FocusPosition",        100,    100,   3600) #found out through testing
gen.add("FocusDistance",         int_t,	   SensorLevels.RECONFIGURE_RUNNING, "FocusDistance",        0,       0,    1000)
gen.add("FocusDirection",        int_t,	   SensorLevels.RECONFIGURE_RUNNING, "FocusDirection",       1,       0,    1,   edit_method=focusdirection_enum)
gen.add("AutoFocusMethod",       int_t,	   SensorLevels.RECONFIGURE_RUNNING, "AutoFocusMethod",      1,       0,    1,   edit_method=autofocusmethod_enum)
gen.add("SetFocusStep",          int_t,	   SensorLevels.RECONFIGURE_RUNNING, "SetFocusStep",         10,      0,    1000) 
gen.add("FocusIncrement",        bool_t,   SensorLevels.RECONFIGURE_RUNNING, "FocusIncrement",     False)
gen.add("FocusDecrement",        bool_t,   SensorLevels.RECONFIGURE_RUNNING, "FocusDecrement",     False)
gen.add("NUCMode",               int_t,	   SensorLevels.RECONFIGURE_RUNNING, "NUCMode",              1,       0,    1,   edit_method=nucmode_enum)
gen.add("NoiseReduction",        int_t,	   SensorLevels.RECONFIGURE_RUNNING, "NoiseReduction",       1,       0,    3,   edit_method=noisereduction_enum)
gen.add("NUCAction",             bool_t,   SensorLevels.RECONFIGURE_RUNNING, "NUCAction",          False)
gen.add("IRFrameRate",           int_t,	   SensorLevels.RECONFIGURE_RUNNING, "IRFrameRate",          1,       0,    2,   edit_method=irframerate_enum)



#LEVEL:
#RECONFIGURE_CLOSE = 3   # Parameters that need a sensor to be stopped completely when changed
#RECONFIGURE_STOP = 1    # Parameters that need a sensor to stop streaming when changed
#RECONFIGURE_RUNNING = 0 # Parameters that can be changed while a sensor is streaming



exit(gen.generate(PACKAGE, "maskor_gige_camera", "Flir"))
